generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String               @id @default(cuid())
  name            String?
  email           String?              @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role                 @default(GUEST)
  achievements    Achievement[]
  modulesProgress UserModuleProgress[]
  lessonsProgress UserLessonProgress[]
  tasksProgress   UserTaskProgress[]
  modSuggestions  ModSuggestion[]
  lesSuggestions  LesSuggestion[]
}

model UserModuleProgress {
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId     String
  module       Module               @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonProg   UserLessonProgress[]
  startedAt    DateTime             @default(now())
  lastTimeSeen DateTime             @default(now())
  completed    Boolean              @default(false)
  completedAt  DateTime?

  @@unique([userId, moduleId])
}

model UserLessonProgress {
  userId       String
  moduleId     String
  lessonId     String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson       Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userModProg  UserModuleProgress @relation(fields: [userId, moduleId], references: [userId, moduleId], onDelete: Cascade)
  startedAt    DateTime           @default(now())
  lastTimeSeen DateTime           @default(now())
  completed    Boolean            @default(false)
  completedAt  DateTime?
  tasksProg    UserTaskProgress[]

  @@unique([userId, lessonId])
}

model UserTaskProgress {
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId       String
  task         Task               @relation(fields: [taskId], references: [id], onDelete: Cascade)
  lessonId     String
  userLessProg UserLessonProgress @relation(fields: [userId, lessonId], references: [userId, lessonId], onDelete: Cascade)
  startedAt    DateTime           @default(now())
  status    TaskStatus            @default(NOTSUBMITTED)
  richText String?
  grade Float?
  completedAt DateTime?
  submittedAt  DateTime?

  @@unique([userId, taskId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id          String               @id @default(cuid())
  name        String
  body        String?              @db.Text
  description String?              @db.Text
  updatedAt   DateTime             @default(now())
  lessons     Lesson[]
  users       UserModuleProgress[]
  suggestions ModSuggestion[]
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  image       String?
  conqueredAt DateTime @default(now())
}

model Lesson {
  id          String               @id @default(cuid())
  index       Int
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  richText    String               @db.Text
  users       UserLessonProgress[]
  moduleId    String
  module      Module               @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  tasks       Task[]
  videos      Video[]
  links       Link[]
  projects    Project[]
  suggestions LesSuggestion[]
  previous String?
  next String?
}

model Task {
  id        String             @id @default(cuid())
  name      String
  richText  String             @db.Text
  createdAt DateTime           @default(now())
  lessonId  String
  lesson    Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  users     UserTaskProgress[]
}

model Video {
  id          String  @id @default(cuid())
  name        String
  url         String
  description String?
  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Project {
  id       String @id @default(cuid())
  name     String
  richText String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Link {
  id          String  @id @default(cuid())
  name        String
  url         String
  description String?
  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model ModSuggestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  text      String   @db.Text
  readed    Boolean  @default(false)

  @@map("mod_suggestions")
}

model LesSuggestion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  text      String   @db.Text
  readed    Boolean  @default(false)

  @@map("les_suggestions")
}

enum Role {
  ADMIN
  MEMBER
  GUEST
  UNAUTHENTICATED
}

enum TaskStatus{
  NOTSUBMITTED
  SUBMITTED
  COMPLETED
}
